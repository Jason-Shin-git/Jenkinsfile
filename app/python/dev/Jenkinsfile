pipeline {
    agent {
        label {
            label 'python-agent'
            retries 3
        }
    }

    environment {
        final String param_BRANCH_NAME = "${BRANCH_NAME}".trim()
        final String param_PROJECT_NAME = "${PROJECT_NAME}".trim()
        final String param_GIT_NAME = "${GIT_NAME}".trim()
        final String param_APP_IMAGE_REGISTRY = "${APP_IMAGE_REGISTRY}".trim()
        final String param_PROJECT_GIT_URL = "${SCM_URL}".trim()
        final String param_MANIFEST_GIT_URL = "${MANIFEST_GIT_URL}".trim()
        final String param_LANG_NAME = "${LANG_NAME}".trim()
        final String APP_TAG = "${BRANCH_NAME}-${BUILD_NUMBER}"
        final String APP_IMAGE = "${APP_IMAGE_REGISTRY}/${param_GIT_NAME}:${APP_TAG}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${param_BRANCH_NAME}", credentialsId: 'Bitbucket', url: "${param_PROJECT_GIT_URL}"
            }
        }

        // stage('Install Dependencies') {
        //     container('python'){
        //         steps {
        //             sh 'pip install -r requirements.txt'
        //         }
        //     }
        // }

        stage('Build & Push Container Image') {
            steps {
                container('kaniko') { // kaniko를 통해 이미지를 빌드합니다.
                    sh """
                        /kaniko/executor \
                        --context=./ \
                        --dockerfile=./Dockerfile \
                        --build-arg ARG_BRANCH=${param_BRANCH_NAME} \
                        --destination=${APP_IMAGE} \
                        --force \
                        --push-retry 3
                    """
                }
            }
        }

        stage('Update Manifest') {
            steps {
                cleanWs()
                git branch: "${param_BRANCH_NAME}", credentialsId: 'Bitbucket', url: "${param_MANIFEST_GIT_URL}"
                script {
                    def yamlFile = "${WORKSPACE}/${param_PROJECT_NAME}/${param_BRANCH_NAME}/${param_GIT_NAME}/${param_LANG_NAME}-values.yaml"
                    
                    if (!fileExists(yamlFile)) {
                        echo "Manifest file does not exist. Copying files from base folder."
                        sh "mkdir -p ${WORKSPACE}/${branch}/${env.DOMAIN}/${env.SERVICE}/${env.ROLE}/"
                        sh "chmod -R 777 ${WORKSPACE}/${branch}/${env.DOMAIN}/${env.SERVICE}/${env.ROLE}/"
                        sh "cp ${WORKSPACE}/base/${param_BRANCH_NAME}/${param_LANG_NAME}/*.yaml ${WORKSPACE}/${param_PROJECT_NAME}/${param_BRANCH_NAME}/${param_GIT_NAME}/"
                        sh "git add $WORKSPACE/${branch}/${env.DOMAIN}/${env.SERVICE}/${env.ROLE}/"
                        sh "git commit -m \"Create New Manifest\""
                        sh "git push"
                    }
                    def readManifestYaml = readYaml file: "${yamlFile}"
                    readManifestYaml.image.registry = "${param_APP_IMAGE_REGISTRY}"
                    readManifestYaml.image.name = "${param_GIT_NAME}"
                    readManifestYaml.image.tag = "${APP_TAG}"
                    writeYaml file: "${yamlFile}", data: readManifestYaml, overwrite: true
                    sh """
                        git add ${yamlFile}
                        git commit -m "Update Manifest - ${APP_IMAGE}"
                        git push
                    """
                }
            }
        }
    }
}
